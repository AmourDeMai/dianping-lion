1. 给数据库表添加必要的索引，提高性能
2. project, environment数据加缓存，避免每次生成菜单的性能问题
3. 创建初始化表数据SQL脚本
4. environment添加软删除列isDel, 页面添加删除功能(软删除)
5. 要求各系统带上必要的menu=xxx参数，提供导航条使用
6. 所有ajax的请求，后台发生错误需要有日志
7. 处理textarea, input中显示单，双引号的问题，需要转换为&#39;和&#34;(done)
8. json->object转换，可以使用json obj方式，也可以使用ognl的方式
9. 将出错堆栈信息保存到DB或其他地方，通过页面查看
10.后台操作失败如何展示，如config-list页面的部署或推送ajax请求，是大的modal框展示所有错误信息，还是存储数据库，然后展示链接?
11.删除一条context-config-instance时，是否实时推送到zk?
12.将ServiceConstants.MAX_AVAIL_CONFIG_INST做成数据库中系统配置项，可以临时调整其大小，应对特殊情况(UI上必须控制config instance的条数不能超过这个设定的最大值)
13.老版本中对于avatar-biz中配置的特殊处理，在新版本中如何处理
14.有创建基础数据的sql脚本，创建默认的"公用资源--公用资源--数据库|通用配置", Team(公用资源)的seq最大
15.config的描述(desc)可修改
16.创建内建的用户数据(如：redmine, sa, dba, lion[admin])，且这几个用户都是超户权限，除了lion，其他都不能登陆，另外保留20之前的userid，作为内建用户(除了lion，其他都是system)
	 创建内建的角色数据(Role: SCM, SA...)
	 创建sa名称的用户，用于feature1的sa账号，feature2修改
17.创建context config value时需要先创建默认配置值(如果清除了默认配置，然后点击编辑复杂配置，保存复杂配置时需要检查是否有默认配置)
18.初始导入config脚本中，需要全量的创建一个初始registerpoint
19.注意发布接口必须调用，即使本次没有config走redmine，因为可能存在lion上配置的config，设置为发布生效
20.registerpoint和snapshot表里面的数据需要定期清除，避免太多影响查询性能
21.User中标注了是否是系统用户(如redmine, sa, dba)，在人工操作lion-console界面时给于提醒(比如由系统用户设置的config最好不要去手动修改或推送，应由系统来操作)
22.lion-client中的cache存在问题，如果以非法的key访问ConfigCache时都会缓存一个StringValue(null)值，这样非法的key太多之后会导致Map无限放大，采用LRU策略剔除
     StringValue(null)的值
23.lion-console与lion-api分开部署，如果在变更环境配置时通知到两边应用(变更zk的地址)
24.lion-client中的watcher需要判斷event是否有path，有的event沒有path，造成NullPointerException異常
25.配置环境beta的名称改为qa，并通知到萧俊
26.lion的下拉框提醒需要改为ajax的方式获取数据源，而不是一次性的存储在页面
27.ServiceConstants中的初始数据常量调整为从1开始







